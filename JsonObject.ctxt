#BlueJ class context
comment0.params=
comment0.target=JsonObject()
comment1.params=pairs
comment1.target=JsonObject(java.util.ArrayList)
comment10.params=source\ startIndex
comment10.target=int\ endOfArray(java.lang.String,\ int)
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Returns\ a\ String\ representation\ of\ this\ JsonObject.\n\ \n\ This\ String\ is\ formatted\ in\ such\ a\ way\ that\n\ JsonObject.jsonify(aJsonObject.toString())\ equals\ aJsonObject.\n\ \n\ @return\ A\ String\ representing\ this\ JsonObject.\n
comment12.params=
comment12.target=java.lang.String\ format()
comment12.text=\n\ Returns\ a\ String\ representation\ of\ this\ JsonObject,\ but\ also\ formats\n\ the\ String\ in\ a\ more\ easy\ to\ read\ fashion.\ \n\ \n\ As\ a\ general\ rule,\ JsonObjects\ that\ are\ nested\ internally\ increase\ in\n\ indentation,\ and\ every\ key/value\ pair\ takes\ up\ its\ own\ line.\ \n
comment13.params=i
comment13.target=java.lang.String\ format(int)
comment14.params=indentNumber
comment14.target=java.lang.String\ indent(int)
comment14.text=\n\ This\ is\ a\ private\ helper\ method\ that\ simply\ gives\ back\ a\ String\n\ containing\ 'indentNumber'\ tabs.\n\ \n\ @param\ indentNumber\ The\ number\ of\ tabs\ in\ the\ return\ String.\n\ @return\ an\ indentation\ String\ that\ consists\ of\ 'indentNumber'\ tabs.\n
comment2.params=source
comment2.target=JsonObject\ jsonify(java.lang.String)
comment3.params=index
comment3.target=Value\ get(int)
comment3.text=\n\ Gets\ the\ value\ at\ the\ "index"\ numbered\ index\ in\ this\ JsonObject.\n\ \n\ This\ method\ is\ meant\ to\ be\ used\ when\ the\ JsonObject\ is\ static\ every\n\ time,\ like\ when\ calling\ from\ a\ server\ with\ a\ known\ response.\ This\ method\n\ can\ then\ be\ used\ to\ somewhat\ simplify\ the\ code\ by\ treating\ this\ JsonObject\n\ like\ an\ ArrayList.\n\ \n\ @param\ index\ The\ index\ of\ the\ key-value\ pair\ to\ return.\n\ @return\ The\ "index"-th\ value\ in\ this\ JsonObject.\n
comment4.params=key
comment4.target=Value\ get(java.lang.String)
comment4.text=\n\ Gets\ the\ value\ that\ matches\ the\ given\ key,\ if\ this\ JsonObject\ contains\n\ the\ given\ key.\ Otherwise,\ returns\ null.\n\ @return\ The\ Value\ associated\ with\ the\ given\ key.\n\ @param\ key\ A\ String\ containing\ the\ name\ of\ a\ key\ to\ match\ in\ this\ object.\n
comment5.params=key\ value
comment5.target=void\ add(java.lang.String,\ java.lang.Object)
comment5.text=\n\ Add\ a\ given\ key-value\ pair\ to\ this\ JsonObject.\n\ \n\ Valid\ types\ for\ value\:\ any\ number,\ JsonObject,\ JsonArray,\n\ String,\ true,\ false,\ and\ null.\n\ \n\ @param\ key\ A\ String\ containing\ the\ name\ of\ the\ key\ to\ add.\n\ @param\ value\ An\ Object\ of\ one\ of\ the\ above\ types\ representing\n\ \ the\ value\ meant\ to\ be\ associated\ with\ the\ given\ key.\n
comment6.params=
comment6.target=java.util.ArrayList\ getKeyList()
comment6.text=\n\ Returns\ an\ ArrayList\ containing\ all\ of\ the\ String\ keys\ in\ this\n\ JsonObject.\n
comment7.params=source
comment7.target=java.lang.String\ removeWhiteSpace(java.lang.String)
comment8.params=source\ startIndex
comment8.target=int\ endOfString(java.lang.String,\ int)
comment9.params=source\ startIndex
comment9.target=int\ endOfJsonObject(java.lang.String,\ int)
numComments=15
